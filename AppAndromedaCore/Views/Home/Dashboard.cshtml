@using BAL.Modelos;
@using Newtonsoft.Json;
@model List<AccesoModel>

@{
    ViewBag.Title = "Dashboard";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<link rel="stylesheet" href="~/Content/TableroMenu.css" />


<header>
    
    <div class="wave-container">
        <!-- Olas en movimiento -->
        <div class="wave wave1"></div>
        <div class="wave wave2"></div>
        <!-- Aquí puedes agregar el contenido principal de tu página -->
        <div class="main-content">
            <div class="row justify-content-center d-flex flex-wrap">

                @if (Model != null)
                {

                    for (var i = 0; i < Model.Count(); i++)
                    {
                        if (string.IsNullOrWhiteSpace(@Model[i].idPadre))
                        {
                            <div class="col-12 col-sm-6 col-md-4 col-lg-2 elemento">
                                <div class="card text-center ecard p-2"
                                     onmouseover="showCardBody(this)"
                                     onmouseout="hideCardBody(this)">
                                    <div class="card-header menu-header">
                                        <img src="../../@Model[i].imagen"
                                             alt="Menu Image"
                                             class="menu-image"
                                             onclick="loadMenuOptions('@Model[i].idMenu'); $('#configModal').modal('show');" />
                                        <br /><h5 class="card-title" style="color: white">@Model[i].nomMenu</h5>
                                    </div>
                                    <div class="card-body">
                                        @*<h5 class="card-title">@Model[i].nomMenu</h5>*@
                                        <p class="card-text">@Model[i].descripcion</p>
                                    </div>
                                </div>
                            </div>
                        }
                    }
                }

            </div>
        </div>

    </div>
 
</header>


<!-- Modal -->
<div class="modal fade"
     id="configModal"
     tabindex="-1"
     role="dialog"
     aria-labelledby="configModalLabel"
     aria-hidden="true"
     style="border-radius: 2rem !important">
    <div class="modal-dialog fade-in"
         role="document">
        <div class="modal-content">
            <div class="modal-header" style="background: linear-gradient(288deg, rgba(31,84,157,0.3897934173669467) 0%, rgba(31,84,157,0.9164040616246498) 0%, rgba(0,212,255,1) 100%); color: white ">
                <h5 class="modal-title"
                    id="configModalLabel">
                    Opciones de menu
                </h5>
            </div>
            <div class="modal-body">
                <ul class="list-group list-group-flush"
                    id="menuOptionsList">
                    <!-- Opciones de menú cargadas dinámicamente -->
                </ul>
            </div>
            <div class="modal-footer">
                <button type="button"
                        class="btn btn-danger"
                        style="border-radius: 2rem !important"
                        data-dismiss="modal">
                    Salir
                </button>
            </div>
        </div>
    </div>
</div>

<script>
          const menuOptions = @Html.Raw(JsonConvert.SerializeObject(Model));
          function loadMenuOptions(idPadre) {
            const menuOptionsList = document.getElementById("menuOptionsList");
            menuOptionsList.innerHTML = ""; // Limpia las opciones existentes

              // Filtra las opciones que tienen el idPadre proporcionado
              const filteredOptions = menuOptions.filter(option => parseInt(option.idPadre) === parseInt(idPadre));

              // Si no hay opciones para este idPadre, muestra un mensaje o realiza una acción
              if (filteredOptions.length === 0) {
                  console.warn(`No se encontraron opciones de menú para idPadre: ${idPadre}`);
                  return;
              }

              // Crea los elementos de lista para cada opción
              filteredOptions.forEach((option) => {
                  const listItem = document.createElement("li");
                  listItem.className = "list-group-item rounded-btn";
                  listItem.innerHTML = `<i class="fa fa-caret-right"></i> ${option.nomMenu}`;
                  switch (option.linkExterno) {
                      case '0.0'://Acceso del modulo central
                          var ruta = option.controller + "?Login=@Session["UsuarioAD"].ToString()" ;
                          listItem.onclick = () => navigateTo(ruta);
                          break;
                      case '1.0': //Acceso a aplicaciones externas
                          listItem.onclick = () => navigateTo(option.controller);
                          break;
                      case '2.0'://Acceso   A SMS
                          debugger;
                          var ruta = option.controller + "@Session["UsuarioAD"].ToString()#";
                          console.log(ruta);
                          listItem.onclick = () => navigateTo(ruta);
                          break;
                      case '3.0'://Acceso  Gestor contratación
                          debugger;
                          var ruta = option.controller + "?Usuario=@Session["UsuarioAD"].ToString()";
                          listItem.onclick = () => navigateTo(ruta);
                          break;
                      case '4.0'://Acceso  Telemedicina
                          debugger;
                          var fullpath =  option.controller + "?Usuario=@Session["UsuarioAD"].ToString()&Doc=]@Session["UsuarioAD"].ToString()";
                          console.log(fullpath);
                          listItem.onclick = () => ConsultarIdentificacion(fullpath);
                          break;

                      default:
                  }
                  menuOptionsList.appendChild(listItem);
              });
          }

          function navigateTo(page) {
              // window.location.href = page;
              window.open(page, '_blank').focus();
          }

          function showCardBody(card) {
            $(card).find(".card-body").css("display", "block").addClass("fade-in");
          }

          function hideCardBody(card) {
            $(card)
              .find(".card-body")
              .css("display", "none")
              .removeClass("fade-in");
          }

          function ConsultarIdentificacion(vruta) {

            const dtos = vruta.split("]");

            jQuery.ajax({
                url:'@Url.Action("GetInformacionUsuario", "Usuarios")',
                type: "GET",
                async: false,
                cache: false,
                data: { usuario: 1152463208 },
                contentType: "application/json; charset=utf-8",
                success: function (data) {

                    if (data != null) {
                        var respuesta = JSON.parse(data);
                        var dato = dtos[0] + respuesta[0].idetificadion;
                        //var dato = dtos[0] + "43026263";
                        window.open(dato, '_blank').focus();

                        }

                },
                error: function (error) {
                    console.log(error)
                },
                beforeSend: function () {
                    //hace algo antes des consultar
                },
            });

          }

</script>

@if (ViewBag.Message != null)
{
    <script type="text/javascript">
        window.onload = function () {
            const Toast = Swal.mixin({
                toast: true,
                position: 'top-end',
                showConfirmButton: false,
                timer: 8000,
                timerProgressBar: true,
                didOpen: (toast) => {
                    toast.addEventListener('mouseenter', Swal.stopTimer)
                    toast.addEventListener('mouseleave', Swal.resumeTimer)
                }
            });

            Toast.fire({
                icon: '@ViewBag.AlertType',
                title: '@ViewBag.Message'
            });

         };
    </script>
}
